name: Recovery Build (Fixed Version)

on:
  workflow_dispatch:
    inputs:
      MANIFEST_URL:
        description: 'MANIFEST_URL (if want to use SSH keys, use git@github.com:XXXXX)'
        required: true
        default: 'https://github.com/momo54181/platform_manifest_twrp_omni'
      MANIFEST_BRANCH:
        description: 'MANIFEST_BRANCH'
        required: true
        default: 'twrp-10.0-deprecated'
      DEVICE_TREE_URL:
        description: 'DEVICE_TREE_URL'
        required: true
        default: 'https://github.com/KevinLmK0702/android_device_omni_k6853v1_64'
      DEVICE_TREE_BRANCH:
        description: 'DEVICE_TREE_BRANCH'
        required: true
        default: 'master'
      DEVICE_PATH:
        description: 'DEVICE_PATH'
        required: true
        default: 'device/alps/k6853v1_64'
      COMMON_TREE_URL:
        description: 'COMMON_TREE_URL (if no common tree, leave blank)'
        required: false
      COMMON_PATH:
        description: 'COMMON_PATH (if no common tree, leave blank)'
        required: false
      DEVICE_NAME:
        description: 'DEVICE_NAME'
        required: true
        default: 'k6853v1_64'
      MAKEFILE_NAME:
        description: 'MAKEFILE_NAME'
        required: true
        default: 'omni_k6853v1_64'
      BUILD_TARGET:
        description: 'BUILD_TARGET'
        required: true
        default: 'recovery'

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
    - name: Display Run Parameters
      run: |
        echo "::group::User Environment Variables"
        echo "Manifest URL: ${{ github.event.inputs.MANIFEST_URL }}"
        echo "Manifest Branch: ${{ github.event.inputs.MANIFEST_BRANCH }}"
        echo "Device Tree URL: ${{ github.event.inputs.DEVICE_TREE_URL }}"
        echo "Device Tree Branch: ${{ github.event.inputs.DEVICE_TREE_BRANCH }}"
        echo "Device Path: ${{ github.event.inputs.DEVICE_PATH }}"
        echo "Device Name: ${{ github.event.inputs.DEVICE_NAME }}"
        echo "Makefile Name: ${{ github.event.inputs.MAKEFILE_NAME }}"
        echo "Build Target: ${{ github.event.inputs.BUILD_TARGET }}.img"
        echo "::endgroup::"

    - name: Check Out
      uses: actions/checkout@v4

    - name: Cleanup
      uses: rokibhasansagar/slimhub_actions@main

    - name: Prepare the environment
      run: |
        sudo apt update && sudo apt upgrade -y
        sudo add-apt-repository universe -y
        sudo apt update
        
        # 安装所有依赖包（包括zopfli）
        DEBIAN_FRONTEND=noninteractive sudo apt install -yq \
            zopfli libzopfli-dev \
            linux-modules-extra-$(uname -r) \
            gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib \
            libc6-dev lib32ncurses-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils \
            xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses-dev libsdl1.2-dev \
            build-essential libgtk-3-dev libglu1-mesa-dev freeglut3-dev git libxml2 lzop pngcrush schedtool squashfs-tools \
            imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libncurses6 python3 tar

        # 三阶段安装zopflipng
        echo "=== 开始安装 zopflipng ==="
        
        # 阶段1：尝试系统包安装
        echo "::group::尝试通过apt安装zopflipng"
        if sudo apt install -y zopflipng 2>/dev/null; then
          echo "成功通过系统包安装zopflipng"
          zopflipng --version || echo "无法获取版本信息"
        else
          echo "::warning::系统包安装失败，进入阶段2：源码编译"
          
          # 阶段2：源码编译
          echo "::group::从源码编译zopflipng"
          git clone https://github.com/google/zopfli.git
          cd zopfli
          if make zopflipng; then
            echo "源码编译成功"
            sudo mv zopflipng /usr/local/bin/
            zopflipng --version || echo "无法获取版本信息"
          else
            echo "::warning::源码编译失败，进入阶段3：预编译版本"
            
            # 阶段3：预编译版本
            echo "::group::使用预编译版本"
            curl -L https://github.com/google/zopfli/releases/download/zopfli-1.0.3/zopflipng-linux-x64 -o zopflipng
            chmod +x zopflipng
            sudo mv zopflipng /usr/local/bin/
            /usr/local/bin/zopflipng --version || echo "预编译版本"
          fi
          cd ..
          rm -rf zopfli
        fi
        echo "::endgroup::"

        # 最终验证
        if ! which zopflipng >/dev/null; then
          echo "::error::所有安装方法均失败！"
          exit 1
        else
          echo "zopflipng 已成功安装于: $(which zopflipng)"
          zopflipng --version || echo "版本信息不可用"
        fi

    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup SSH Keys
      if: ${{ startsWith(github.event.inputs.MANIFEST_URL, 'git@github.com') || 
          startsWith(github.event.inputs.DEVICE_TREE_URL, 'git@github.com') ||
          startsWith(github.event.inputs.COMMON_TREE_URL, 'git@github.com') }}
      uses: webfactory/ssh-agent@v0.9.0
      with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Install repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo

    - name: Initialize repo
      run: |
        mkdir workspace
        cd workspace
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        git config --global user.name "Nico170420"
        git config --global user.email "b170420nc@gmail.com"
        repo init --depth=1 -u ${{ github.event.inputs.MANIFEST_URL }} -b ${{ github.event.inputs.MANIFEST_BRANCH }}
      id: pwd

    - name: Repo Sync
      run: |
        repo sync -j$(nproc --all) --force-sync
      working-directory: workspace

    - name: Patch Build System
      run: |
        # 禁用roomservice的Gerrit查询
        sed -i 's/^\(.*fetch_device(device)\)/#\1/' vendor/omni/build/tools/roomservice.py
        
        # 确保使用本地设备树
        echo "SKIP_DEVICE_TREE_VERIFICATION := true" >> ${{ github.event.inputs.DEVICE_PATH }}/BoardConfig.mk
        
        # 修复产品继承链
        sed -i 's|vendor/omni/config/common.mk|vendor/twrp/config/common.mk|g' ${{ github.event.inputs.DEVICE_PATH }}/*.mk
        
        # 确保TWRP vendor配置存在
        if [ ! -d "vendor/twrp" ]; then
          git clone https://github.com/minimal-manifest-twrp/vendor_twrp vendor/twrp -b ${{ github.event.inputs.MANIFEST_BRANCH }}
        fi
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Clone device tree
      run: |
        git clone ${{ github.event.inputs.DEVICE_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.DEVICE_PATH }}
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Clone common tree
      if: |
        github.event.inputs.COMMON_TREE_URL != null
        && github.event.inputs.COMMON_PATH != null
      run: |
        git clone ${{ github.event.inputs.COMMON_TREE_URL }} -b ${{ github.event.inputs.DEVICE_TREE_BRANCH }} ./${{ github.event.inputs.COMMON_PATH }}
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Check Build Tree
      uses: haya14busa/action-cond@v1
      id: buildtree
      with:
        cond: ${{ github.event.inputs.MANIFEST_BRANCH == 'twrp-11' || github.event.inputs.MANIFEST_BRANCH == 'twrp-12.1' }}
        if_true: twrp
        if_false: omni

    - name: Sync Device Dependencies
      run: |
        bash ${GITHUB_WORKSPACE}/scripts/convert.sh ${{ github.event.inputs.DEVICE_PATH }}/${{ steps.buildtree.outputs.value }}.dependencies
        repo sync -j$(nproc --all)
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}
      continue-on-error: true

    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 12

    - name: Validate Build Configuration
      run: |
        echo "===== Architecture Verification ====="
        grep -E "TARGET_ARCH|TARGET_KERNEL_ARCH" ${{ github.event.inputs.DEVICE_PATH }}/BoardConfig.mk || true
        
        echo "===== Product Makefile Check ====="
        ls -la ${{ github.event.inputs.DEVICE_PATH }}/*.mk
        
        echo "===== Vendor Config Check ====="
        ls -la vendor/twrp/config/common.mk
        
        echo "===== zopflipng Verification ====="
        which zopflipng
        zopflipng --version || echo "无法获取版本信息"
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Building recovery
      run: |
        # 确保使用自定义安装的zopflipng
        export PATH="/usr/local/bin:$PATH"
        
        echo "===== 构建环境验证 ====="
        echo "zopflipng 路径: $(which zopflipng)"
        zopflipng --version || echo "无法获取版本信息"
        
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        export LC_ALL=C
        
        # 手动设置构建目标（绕过lunch检查）
        export TARGET_DEVICE=${{ github.event.inputs.DEVICE_NAME }}
        export TARGET_PRODUCT=${{ github.event.inputs.MAKEFILE_NAME }}
        
        echo "===== 开始构建 ====="
        make -j$(($(nproc --all)*2)) ${{ github.event.inputs.BUILD_TARGET }}image 2>&1 | tee build.log
        
        # 构建失败分析
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "::error::构建失败！以下是错误摘要："
            grep -iE 'error|fail' build.log | head -n 50
            exit 1
        fi
        
        echo "===== 构建产物检查 ====="
        ls -lh out/target/product/${{ github.event.inputs.DEVICE_NAME }}/${{ github.event.inputs.BUILD_TARGET }}.img || true
      working-directory: ${{ steps.pwd.outputs.workspace-folder }}

    - name: Upload to Release
      uses: softprops/action-gh-release@v2
      with:
        files: | 
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/${{ github.event.inputs.BUILD_TARGET }}.img
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*.zip
          workspace/out/target/product/${{ github.event.inputs.DEVICE_NAME }}/*vendor*.img
        name: ${{ github.event.inputs.DEVICE_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: |
          Manifest: ${{ github.event.inputs.MANIFEST_BRANCH }}
          Device: ${{ github.event.inputs.DEVICE_NAME }}
          Target: ${{ github.event.inputs.BUILD_TARGET }}.img
          
          构建环境信息:
          - Ubuntu 24.04
          - zopflipng 版本: $(zopflipng --version 2>&1 || echo "未知")
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
